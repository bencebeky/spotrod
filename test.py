#!/usr/bin/env python
# coding=utf8
# 
# Copyright 2013, 2014 Bence BÃ©ky
#
# This file is part of Spotrod.
# 
# Spotrod is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Spotrod is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Spotrod.  If not, see <http://www.gnu.org/licenses/>.
# 

# Generate a spotrod model.

import numpy as np
import spotrod
import matplotlib.pyplot as plt
#pyplot.interactive(True)

# Set transit parameters.
period = 4.8878026
periodhour = 24.0*period
midtransit = 726.01298
rp = 0.05866
semimajoraxis = 14.17
k = 0.216
h = 0.133
impactparam = 0.203
u1 = 0.652
u2 = 0.038

# Hardcoded Kepler data for comparison.
timebkjd = np.array([
        862.77430177,  862.7749829 ,  862.77566412,  862.77634525,
        862.77702628,  862.7777074 ,  862.77838863,  862.77906975,
        862.77975088,  862.7804321 ,  862.78111323,  862.78179436,
        862.78247558,  862.78315661,  862.78383773,  862.78451896,
        862.78520008,  862.78588121,  862.78656243,  862.78724356,
        862.78792469,  862.78860571,  862.78928694,  862.78996806,
        862.79064919,  862.79133041,  862.79201154,  862.79269267,
        862.79337389,  862.79405492,  862.79473604,  862.79541727,
        862.79609839,  862.79677952,  862.79746074,  862.79814187,
        862.7988231 ,  862.79950402,  862.80018525,  862.80086637,
        862.8015476 ,  862.80222872,  862.80290985,  862.80359108,
        862.8042722 ,  862.80495343,  862.80563445,  862.80631558,
        862.8069967 ,  862.80767793,  862.80835905,  862.80904018,
        862.80972141,  862.81040253,  862.81108356,  862.81176478,
        862.81244591,  862.81312703,  862.81380826,  862.81448938,
        862.81517051,  862.81585164,  862.81653276,  862.81721389,
        862.81789501,  862.81857624,  862.81925736,  862.81993849,
        862.82061972,  862.82130084,  862.82198187,  862.82266299,
        862.82334422,  862.82402534,  862.82470657,  862.82538769,
        862.82606882,  862.82675005,  862.82743117,  862.8281122 ,
        862.82879332,  862.82947455,  862.83015567,  862.8308369 ,
        862.83151803,  862.83219915,  862.83288038,  862.8335614 ,
        862.83424253,  862.83492375,  862.83560488,  862.836286  ,
        862.83696723,  862.83764836,  862.83832948,  862.83901061,
        862.83969173,  862.84037286,  862.84105398,  862.84173521,
        862.84241634,  862.84309746,  862.84377869,  862.84445971,
        862.84514084,  862.84582206,  862.85399577,  862.854677  ,
        862.85535812,  862.85603915,  862.85672037,  862.8574015 ,
        862.85808262,  862.85876385,  862.85944498,  862.8601262 ,
        862.86080733,  862.86148835,  862.86216948,  862.8628507 ,
        862.86353183,  862.86421306,  862.86489418,  862.86557531,
        862.86625643,  862.86693756,  862.86761868,  862.86829981,
        862.86898103,  862.86966216,  862.87034329,  862.87102451,
        862.87170564,  862.87238676,  862.87306789,  862.87374901,
        862.87443014,  862.87511127,  862.87579249,  862.87647362,
        862.87715474,  862.87783597,  862.87851699,  862.87919812,
        862.87987934,  862.88056047,  862.8812416 ,  862.88192282,
        862.88260395,  862.88328517,  862.8839661 ,  862.88464732,
        862.88532845,  862.88600968,  862.8866908 ,  862.88737193,
        862.88805315,  862.88873428,  862.8894153 ,  862.89009653,
        862.89077765,  862.89145878,  862.89214001,  862.89282113,
        862.89350226,  862.89418348,  862.89486461,  862.89554563,
        862.89622686,  862.89690799,  862.89758911,  862.89827034,
        862.89895146,  862.89963259,  862.90031371,  862.90099484,
        862.90167596,  862.90235709,  862.90303832,  862.90371944,
        862.90440057,  862.90508179,  862.90576292,  862.90644394,
        862.90712517,  862.9078063 ,  862.90848742,  862.90916855,
        862.90984977,  862.9105309 ,  862.91121212,  862.91189325,
        862.91257427,  862.9132554 ,  862.91393663,  862.91461775,
        862.91529898,  862.9159801 ,  862.91666123,  862.91734245,
        862.91802348,  862.91870461,  862.91938583,  862.92006696,
        862.92074808,  862.92142931,  862.92211043,  862.92279156,
        862.92347268,  862.92415381,  862.92483494,  862.92551616,
        862.92619729,  862.92687841,  862.92755954,  862.92824076,
        862.92892179,  862.92960292,  862.93028414,  862.93096527,
        862.93164639,  862.93232762,  862.93300874,  862.93368987,
        862.93437109,  862.93505212,  862.93573325,  862.93641437,
        862.9370956 ,  862.93777672,  862.93845795,  862.93913907,
        862.9398202 ,  862.94050123,  862.94118245,  862.94186358,
        862.9425447 ,  862.94322593,  862.94390705,  862.94458828,
        862.9452694 ,  862.94595043,  862.94663156,  862.94731278,
        862.94799391,  862.94867513,  862.94935626,  862.95003738,
        862.95071851,  862.95139964,  862.95208076,  862.95276199,
        862.95344311,  862.95412424,  862.95480536,  862.95548659,
        862.95616771,  862.95684884,  862.95752997,  862.95821109,
        862.95889222,  862.95957334,  862.96025457,  862.96093569,
        862.96161682,  862.96229805,  862.96297907,  862.9636602 ,
        862.96434142,  862.96502255,  862.96570367,  862.9663849 ,
        862.96706603,  862.96774715,  862.96842828,  862.9691094 ])

flux = np.array([
        1.00001502,  1.00011146,  0.9999088 ,  0.99986404,  1.00017059,
        1.00004733,  1.00000525,  1.00002182,  1.000018  ,  1.00011754,
        1.00024319,  1.00000477,  1.00002742,  1.00002098,  0.99994868,
        1.00000179,  1.00006425,  1.00003684,  0.99985909,  0.99994212,
        1.0000056 ,  1.00008953,  0.9999904 ,  1.00023031,  0.99994332,
        1.00002301,  1.00001895,  1.00008833,  1.00005352,  1.00005925,
        1.00005841,  0.99992043,  0.99998897,  0.99994433,  1.00000596,
        1.00006211,  0.99998575,  1.00016248,  1.00011778,  0.9999041 ,
        0.99998355,  1.00001037,  0.99982649,  1.00010908,  1.0000788 ,
        0.99994713,  0.9999423 ,  0.99999607,  1.00001299,  0.99997509,
        1.00003362,  1.00005007,  1.00006843,  1.00014865,  0.99996239,
        1.00011528,  1.00009525,  0.99976599,  0.99990702,  0.99996436,
        1.00005662,  1.00005996,  0.99997658,  1.00011468,  0.99994218,
        0.99988347,  0.99988806,  0.99990958,  0.99999011,  0.99996114,
        1.00006676,  0.9998951 ,  0.99982387,  0.99937445,  0.9991619 ,
        0.99875963,  0.99852014,  0.99810749,  0.99777806,  0.99760878,
        0.99745947,  0.99736047,  0.99721611,  0.99717116,  0.9969632 ,
        0.99719524,  0.99682343,  0.99664891,  0.99667525,  0.99675477,
        0.99673432,  0.99675959,  0.99656862,  0.99642164,  0.99628389,
        0.99630886,  0.99627513,  0.99648875,  0.99635649,  0.99634349,
        0.99621594,  0.99623954,  0.99631166,  0.9962979 ,  0.99620891,
        0.9959982 ,  0.99622595,  0.99581271,  0.99585932,  0.99559647,
        0.99561441,  0.99567556,  0.99574965,  0.99581242,  0.99556804,
        0.99558204,  0.99564689,  0.99579507,  0.99569666,  0.9957149 ,
        0.99561006,  0.99568397,  0.99574482,  0.9956907 ,  0.99542493,
        0.99571925,  0.99569833,  0.99566346,  0.99567807,  0.99557054,
        0.99554646,  0.99555403,  0.9955706 ,  0.99588805,  0.99567556,
        0.99565607,  0.99572146,  0.9955793 ,  0.99551386,  0.99555945,
        0.99549764,  0.99536341,  0.99564743,  0.99573362,  0.99566519,
        0.9955281 ,  0.99549812,  0.99567729,  0.99590689,  0.99603015,
        0.99632037,  0.99639261,  0.99673784,  0.99679929,  0.99696648,
        0.99741775,  0.9977181 ,  0.99784279,  0.99781847,  0.99759108,
        0.99760234,  0.99737346,  0.99670219,  0.99654603,  0.99648976,
        0.99663424,  0.99636775,  0.99633443,  0.99625546,  0.99631631,
        0.99633753,  0.99619389,  0.9962616 ,  0.99609911,  0.99622977,
        0.9963873 ,  0.99631327,  0.99631774,  0.99626207,  0.99652457,
        0.99658388,  0.99639291,  0.99651682,  0.99667561,  0.9966169 ,
        0.99671251,  0.99673575,  0.99702287,  0.9969942 ,  0.99705482,
        0.99713427,  0.99712652,  0.99722874,  0.9973709 ,  0.99735081,
        0.99760497,  0.99771279,  0.99808788,  0.99852681,  0.99877846,
        0.99928546,  0.99963582,  0.99981868,  1.00002289,  0.99993366,
        1.00010097,  0.99974585,  0.99985188,  0.9999491 ,  0.99979812,
        0.99989587,  1.00000596,  1.0000205 ,  1.00003004,  1.00001144,
        1.00000894,  1.00000644,  0.99996018,  1.00004148,  1.00008738,
        1.00010169,  0.99985975,  1.00002301,  0.99996281,  0.99999022,
        0.99993569,  1.00003219,  1.00005472,  0.9999181 ,  0.99993783,
        0.99992323,  0.99993175,  0.99996465,  1.00000334,  0.99999267,
        0.99986017,  0.99987572,  1.00006187,  0.9999007 ,  0.99988961,
        0.99988616,  0.99990296,  0.9999519 ,  1.00001729,  0.99993765,
        1.00015366,  1.00007725,  0.99984109,  1.00003469,  1.0000726 ,
        1.00003636,  0.99987882,  1.0000385 ,  1.0000546 ,  0.99999309,
        1.00003302,  1.00014091,  1.00018382,  0.99998069,  1.00002921,
        0.99995887,  0.99999738,  1.00002003,  1.0000453 ,  0.9998942 ,
        0.9998737 ,  0.99975103,  0.99999732,  0.99985856,  1.00001299,
        1.00004375,  0.99988288,  0.99976236,  0.99994105,  0.99994707,
        1.00009358])

phase = np.mod((timebkjd-midtransit)/period+0.5, 1.0)-0.5

# Quadratic limb darkening function, Claret et al. 2000.
# I(mu)/I(1) = 1 - a(1-mu) - b(1-mu)^2
def quadraticlimbdarkening(r, u1, u2):
  answer = np.zeros_like(r)
  mask = (r<=1.0)
  oneminusmu = 1.0 - np.sqrt(1.0 - np.power(r[mask],2))
  answer[mask] = 1.0 - u1 * oneminusmu - u2 * np.power(oneminusmu,2)
  return answer

# Initialize spotrod.
# Number of intergration rings.
n = 1000

# Midpoint rule for integration.
# Integration annulii radii.
r = np.linspace(1.0/(2*n), 1.0-1.0/(2*n), n)
# Weights: 2.0 times limb darkening times width of integration annulii.
f = 2.0 * quadraticlimbdarkening(r, u1, u2) / n

# Alternative: trapeziod rule.
#r = numpy.linspace(0.0, 1.0, n)
#f = 2.0 * quadraticlimbdarkening(r, u1, u2) * numpy.append(numpy.append([0.5], numpy.repeat(1.0, n-2)), [0.5]) / (n-1)

# Calculate orbital elements.
eta, xi = spotrod.elements(timebkjd-midtransit, period, semimajoraxis, k, h)
planetx = impactparam*eta/semimajoraxis
planety = -xi
z = np.sqrt(np.power(planetx,2) + np.power(planety,2))
# Calculate planetangle array.
planetangle = np.array([spotrod.circleangle(r, rp, z[i]) for i in range(z.shape[0])])
spotx = 0.204
spoty = 0.376
spotradius = 0.096
spotcontrast = 0.524
fitlightcurve = spotrod.integratetransit(planetx, planety, z, rp, r, f, np.array([spotx]), np.array([spoty]), np.array([spotradius]), np.array([spotcontrast]), planetangle)

#Plot the results
plt.figure(figsize=(11,7))
plt.plot(phase, flux, "b.", label='Data')
plt.plot(phase, fitlightcurve, "k-", label='Model')
plt.legend()
plt.savefig("test.png")
plt.show()
print('Done')